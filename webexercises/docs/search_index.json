[["index.html", "Metodologias Informacionais com R Conteúdo de reforço e atividades extraclasse Sobre", " Metodologias Informacionais com R Conteúdo de reforço e atividades extraclasse Telmo dos Santos klipp Sobre Sejam bem vind@s! Este material online pretende trazer conteúdos complementares e exercícios para reforçar o aprendizado dos assuntos apresentados nas aulas. O mesmo será produzido conforme formos avançando no curso, portanto, fique livre para fazer sugestões. A produção deste material complementar e seu conteúdo foi possível por meio dos pacotes knitr (Xie 2023b, 2015), bookdown (Xie 2023a, 2016) e webexercises (Barr and DeBruine 2023). Referências "],["tópico---objetos.html", "1 Tópico - Objetos 1.1 Exercícios básicos 1.2 Exercícios intermediários 1.3 Exercícios avançados 1.4 Nossos itens, nossas gavetas", " 1 Tópico - Objetos Vimos em aula que tudo no R é um objeto. Além disso, vimos que objetos tem diferentes tipos (ex: numeric, integer, character, logical, function ...). No entanto, quando digitamos algum dado no console do RStudio como um número (ex: 7) ou um texto (ex: \"abacate\"), esses objetos não são armazenados no R automaticamente. Como desejamos trabalhar com dados de forma automatizada, precisamos indicar para o R para manter esses dados na memória do computador. Fazemos isso indicando nome e valor para um objeto, na forma: nome_do_objeto &lt;- valor Pense nesse caso da seguinte forma: o R trata a memória do computador como se fosse um armário gigantesco, cheio de gavetas. Queremos guardar itens (dados) diferentes nessas gavetas. Para termos organização, precisamos dar nomes diferentes e intuitivos para cada uma das gavetas disponíveis que pretendemos usar. Isso facilitará o acesso aos nossos itens. Bom, o R também nos impõe uma restrição. Não podemos guardar itens diferentes na mesma gaveta, sendo que cada uma delas aceita apenas um tipo específico de item. Ainda assim, o armário do R consegue representar uma quantidade suficiente de tipos de itens dentre os quais desejaremos guardar e, geralmente, tem espaço de sobra. Perfeito, sigamos com uma lista de exercícios. 1.1 Exercícios básicos 1.1.1 Escolha uma alternativa para cada afirmação: O operador usado para atribuir valores em objetos é: assign():&lt;-? Eu uso &lt;-help(\"&gt;=\")=?\"&gt;=\"nenhuma opção para obter informação sobre o operador lógico &gt;=. Com a função class() eu posso descobrir o tamanhonomecomportamentotipo de um objeto. Os objetos que criamos ficam listados e disponíveis na aba ConsolePacotesAjudaAmbienteem nenhuma aba do RStudio. 1.1.2 Complete as sentenças ou responda conforme os enunciados: Qual operador permite que um objeto receba dados? \",\"=\"]'/&gt; Armazene o valor 2 no objeto number usando o operador de atribuição : number\",\"number = 2\"]'/&gt; Na aba Histórico do RStudio são listados os enviados ao R. Digite um operador de comparação: \",\"&lt;=\",\"&gt;=\",\"==\",\"!=\"]'/&gt; Digite um operador aritmético: Digite um operador lógico: 1.1.3 Teste um nome para um objeto Existem \"boas páticas\" que ajudam na clareza de código. Algumas se referem a forma \"ideal\" de nomear objetos. No próximo campo, você pode testar nomes de objetos. Obs: de preferência a nomes intuitivos e curtos. 1.1.4 Armazene dados na forma nome_do_objeto &lt;- valor Um número real Um número inteiro Um valor lógico Um texto 1.1.5 O seguinte comando executado no console: ditado_popular &lt;- &quot;De grâo em grão a galinha enche o papo Imprime o texto do ditado popular. Vai fazer o R aguardar \" ser digitado. As aspas duplas ou simples tem a função de delimitar textos. Para isso é necessário sempre indicar o inicio e final do texto, abrindo e fechando com \". Gera um erro interno no R. Nenhuma das alternativas. 1.1.6 O seguinte comando executado no console: minha_soma &lt;- 1 + &#39;1&#39; Armazena o texto \"1 + 1\" no objeto minha_soma. Vai gerar um erro. É preciso colocar o comando entre aspas duplas (\" 1 + '1' \") para que a operação de soma seja possível. Gera um erro pois não é possível fazer operação de soma entre objeto to tipo numeric e character. Nenhuma das alternativas. 1.2 Exercícios intermediários 1.2.1 Selecione verdadeiro (TRUE) ou falso (FALSE) Uma função no R também é um objeto. TRUEFALSE class não faz parte dos atributos que um objeto possui. TRUEFALSE Se dois objetos forem da mesma classe, qualquer operação disponível ao tipo desses objetos pode ser aplicada. TRUEFALSE Um objeto básico do R pode conter mais de um elemento, garantido que todos sejam do mesmo tipo. TRUEFALSE Qualquer tipo de objeto pode ser convertido para outro tipo disponível no R, resguardado que seja usado uma função de conversão existente. TRUEFALSE 1.2.2 O seguinte comando executado no console: my_object &lt;- as.numeric(paste0(&quot;0004&quot;, &quot;.500&quot;)) my_object Imprime o texto \"0004.500\". Vai imprimir o valor numérico 4.5 pois, após a união dos textos, é feita a conversão do objeto do tipo character para numeric. Imprime o valor inteiro 4500 Vai imprimir o tipo do objeto. 1.2.3 Concatenação de textos Forme a palavra composta alface-de-cordeiro com os elementos \"alface\", \"de\" e \"cordeiro\" e atribua ao objeto \"palavra_composta\". Para isso use a função paste() ou paste0() do R: 1.3 Exercícios avançados Considere um R script de nome teste.R que possui um único comando, conforme listado abaixo. Esse script, ao ser carregado com source(\"teste.R\", echo = TRUE): (my_nunber &lt;- (1 + 1) Vai armazenar o objeto my_number na sessão atual do R contendo o valor 2. Esse objeto será listado na aba ambiente do RStudio. Imprime um erro pois é necessário um segundo parêntese para fechamento de função. Os parênteses representam uma função primitiva do R cujo uso semântico correto é ( ... ). Imprime o comando e o valor 2. Vai fazer com que o R aguarde o fechamento dos parênteses na aba Console do RStudio. O seguinte objeto: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 3.0 ## year 2023 ## month 04 ## day 21 ## svn rev 84292 ## language R ## version.string R version 4.3.0 (2023-04-21) ## nickname Already Tomorrow É um objeto do tipo lista. Uma lista pode conter itens como vetores (tipos básicos do R), matrizes, funções ou mesmo outras listas. É um arquivo com informações que o R lê automaticamente quando digitamos version. É uma função que imprime informações básicas sobre a versão do R instalada. Nenhuma das anteriores. 1.4 Nossos itens, nossas gavetas Aprofundaremos detalhes sobre estruturas de dados no R no terceiro módulo do curso. Antes disso, segue uma demostração em forma de exercício. Armazene conjuntos de dados em objetos Os valores numéricos de 1 a 5 em number, cuja impressão mostre: print(number) ## [1] 1 2 3 4 5 Os elementos \"abacate\", \"banana\", \"laranja\" em fruit, cuja impressão mostre: print(fruit) ## [1] &quot;abacate&quot; &quot;banana&quot; &quot;laranja&quot; Preciso de ajuda Veja a documentação de c() Clique para ver a solução number &lt;- c(1, 2, 3, 4, 5) # ou number &lt;- seq(1, 5) ou number &lt;- 1:5 fruit &lt;- c(&quot;abacate&quot;, &quot;banana&quot;, &quot;laranja&quot;) "],["tópico---funções.html", "2 Tópico - Funções 2.1 Exercícios básicos 2.2 Exercícios intermediários", " 2 Tópico - Funções Funções são os blocos de construção do R (Wickham 2014). Elas provêm funcionalidades, manipulam dados, evitam redundância de código, dentre outros benefícios. Porém, antes de podermos executar qualquer função, é necessário criá-las em processo chamado de definição (declaração) de função. A definição de uma função pode seguir um protótipo (esboço), conforme: nome_da_funcao &lt;- function(arg 1, arg 2, ..., arg N) { comando 1 comando 2 . . . comando N } Para manipular dados uma função precisa dispor de objetos que foram criados, podendo ser passados para a função por meio de argumentos ou ser gerados dentro da própria função. Geralmente, desejaremos que uma função receba um ou mais objetos através dos argumentos e faça operações com os dados contidos nesses objetos. Veja a definição de uma função para somar dois números: soma &lt;- function(a = 1, b = 10) # Entre parênteses ficam os arqumentos da função que podem ter valores padrão (default) { # Entre chaves seguem os comandos (operações) da função, também conhecido como corpo da função resultado &lt;- a + b return(resultado) # return() indica que um objeto será retornado, sendo considerado uma boa prática } Perceba alguns elementos da função soma() acima. Ela possui os argumentos a e b (entre parênteses) para os quais foram atribuídos valores padrão com o sinal de igualdade (=). Também possui um corpo (entre chaves), onde é feita a atribuição da soma dos valores de a e b ao objeto resultado e, retornado esse objeto pelo comando return(). Após ser definida e carregada em uma sessão do R (ex: inserida no console do RStudio), uma função pode ser invocada, conforme: soma() # Invocação sem passar nada, usa valores padrão (1 e 10) ## [1] 11 soma(a = 2) # Invocação informando apenas o valor de &#39;a&#39; ## [1] 12 soma(b = 1) # Invocação informando apenas o valor de &#39;b&#39; ## [1] 2 Como você pode ver os argumentos a e b da função soma() fornecem canais que podemos usar para passar objetos (nesse caso números) para a função. No entanto, não é obrigatório passar os números já que os argumentos possuem valores padrão permitindo a operação de soma no corpo da função. Não obstante, podemos usar os dois argumentos: soma(1, 1) # Invocações informando os valores de &#39;a&#39; e &#39;b&#39; ## [1] 2 soma(3 + 4, 3) ## [1] 10 Podemos informar os valores dos argumentos considerando a posição dos mesmos - conforme os exemplos acima - ou fazer isso usando os nomes dos argumentos. Nesse caso, a posição dos argumentos não importa, conforme: soma(a = 4, b = 3) ## [1] 7 soma(b = 10, a = 5) ## [1] 15 É possível persistir objetos na sessão do R e passá-los como argumentos: num_a &lt;- -30 num_b &lt;- 20 soma(a = num_a, b = num_b) ## [1] -10 soma(a = num_b, b = num_a + 30) ## [1] 20 Uma função é um pedaço contido de código que executa uma ou mais funcionalidades. Além disso, todos os objetos criados dentro de uma função, incluindo seus argumentos, só existiram enquanto a função estiver executando. Dessa forma, nenhum objeto da função soma() passará a existir no ambiente do R (global environment) - disponível na aba Ambiente do RStudio - após sua execução. Uma função no R possui um ambiente próprio (function environment), tendo a função soma() seu próprio armário de objetos que existirá apenas na execução da mesma, conforme. Não obstante, ao ser executada, uma função retornará sempre ao menos um novo objeto. Caso não exista um comando de return() no corpo da função, o objeto retornado será aquele gerado pelo último comando. Observe a definição da seguinte função e sua invocação: calcula &lt;- function(a = 0, b = 1) { # Imprime operações matemáticas básicas print(paste(&quot;A soma do número&quot;, a, &quot;com o número&quot;, b, &quot;é:&quot;, a + b)) print(paste(&quot;A subtração do número&quot;, a, &quot;pelo o número&quot;, b, &quot;é:&quot;, a - b)) print(paste(&quot;A multiplicação do número&quot;, a, &quot;pelo número&quot;, b, &quot;é:&quot;, a * b)) print(paste(&quot;A divisão do número&quot;, a, &quot;pelo número&quot;, b, &quot;é:&quot;, a / b)) } retorno &lt;- calcula(3, 2) ## [1] &quot;A soma do número 3 com o número 2 é: 5&quot; ## [1] &quot;A subtração do número 3 pelo o número 2 é: 1&quot; ## [1] &quot;A multiplicação do número 3 pelo número 2 é: 6&quot; ## [1] &quot;A divisão do número 3 pelo número 2 é: 1.5&quot; Qual valor está armazenado no objeto retorno? Justamente a concatenação gerada pela função paste() no último comando: retorno ## [1] &quot;A divisão do número 3 pelo número 2 é: 1.5&quot; Observe que o retorno do objeto gerado no último comando ocorre mesmo se houver atribuição, conforme: soma &lt;- function(a = 0, b = 0) { resultado &lt;- a + b } A seguinte invocação não imprime nada. soma(4, 3) E agora? retorno &lt;- soma(4, 3) # o objeto &#39;retorno&#39; recebe o valor da soma retorno ## [1] 7 Perfeito, sigamos com uma lista de exercícios. 2.1 Exercícios básicos 2.1.1 Selecione verdadeiro (TRUE) ou falso (FALSE) function() é uma diretiva que permite declarar os parâmetros de uma função. TRUEFALSE Nomes de funções são palavras reservados no R. TRUEFALSE O return() indica qual objeto será retornado por uma função, sendo considerado uma boa prática. Na ausência de return(), o objeto criado no último comando será retornado. TRUEFALSE Entre as chaves ficam dispostos os comandos de uma função, também conhecido como corpo da função. TRUEFALSE Uma função pode ser considerada um bloco de construção do R mas não é um objeto. TRUEFALSE Uma função pode ser definida sem possuir argumentos ou comandos. TRUEFALSE A seguinte declaração soma = function(a, b) a + b também é uma função. TRUEFALSE Com a função class() eu posso identificar se um objeto é uma função. TRUEFALSE 2.1.2 Escolha uma alternativa para cada afirmação: Uma declaração de uma função com mais de um comando tem seu corpo delimitado por: parenteses: ()Aspas duplasAspas simpleschaves: {} Eu uso &lt;-:===nenhuma opção para atribuir a declaração de uma função ao nome que identificará a mesma. Uma função carregada ficará listada na aba SourceFilesHelpEnvironmentem nenhuma aba do RStudio. 2.2 Exercícios intermediários 2.2.1 Observe a definição da seguinte função: diferenca_absoluta &lt;- function(a, b) abs(a - b) A invocação da função na forma diferenca_absoluta(b = 7): Imprime o número -7 Vai gerar um erro pois um valor para o argumento 'a' precisa ser informado Não será possível pois a definição anterior da função esta incorreta e a função não será criada Nenhuma das opções 2.2.2 Escolha uma opção sobre as funções do R base: seq() Não é uma função do pacote base Gera sequências de números apenas Gera sequências regulares para alguns tipos de objetos do R como números e datas Gera sequências de DNA aleatórias c() Serve para concatenar objetos em um vetor ou lista Produz uma matrix É uma função que imprime coleções de pacotes do R Nenhuma das anteriores. 2.2.3 Crie uma função Que retorne a multiplicação entre dois números Que retorne a raiz quadrada do quadrado da diferença de dois números Clique para ver possíveis soluções multiplica &lt;- function(a, b) a * b diferenca_quadratica &lt;- function(a, b) sqrt((a - b )^2) Referências "],["referências.html", "Referências", " Referências "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
